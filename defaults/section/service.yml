---
# yamllint disable rule:line-length
###############################################################################
# Systemd [Service] Heading
###############################################################################
# Unit service section configuration.
#
# Encodes information about a process controlled and supervised by systemd.
#
# Socket activated services are automatically ordered after their activating
# socket unit via After= dependency. Services pull all socket units listed in
# Sockets= via automatic Wants= and After= dependencies.
#
# Automatic dependencies (unless default_dependencies: False):
# * Requires= and After= on sysinit.target
# * After= on basic.target
# * Conflicts= and Before= on shutdown.target
#
# These ensure that normal service units pull in basic system initialization,
# and are terminated cleanly prior to system shutdown. Only services involved
# with early boot or late system shutdown should disable this option.
#
# Services lacking both exec_start and exec_stop are not valid.
#
# See reference sections for syntax formats:
# * SIZE (syntax)
# * TIME (time)
# * SPECIFIERS (unit specifiers)
# * COMMAND LINES (service command lines)
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.syntax.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#Specifiers
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#Command%20lines
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf.html

# Service type (notify mechanism for service startup finish).
#
# Values:
#          simple: consider the unit started immediately after the main
#                  service process has been forked off (proceeds with further
#                  jobs right after fork returns). Default if exec_start is set
#                  but not type or bus_name. exec is usually a better option.
#            exec: consider the unit started immediately after the main
#                  service binary has been executed (will not proceed before
#                  both fork and execve in the service process succeeded). Use
#                  for long running services.
#         forking: consider the unit started immediately after the binary
#                  that forked off by the manager exits (proceeds with starting
#                  follow-up units after the parent process exits). Recommend
#                  using pid_file to reliably identify main process.
#                  Discouraged: use notify, notify-reload, or dbus instead.
#         oneshot: consider the unit up after the main process exits (proceeds
#                  to start follow-up units). Default if type or exec_start are
#                  not specified. Service will never enter active unit state,
#                  but will directly transition from activating to deactivating
#                  or dead. It will show up as dead. Use remain_after_exit to
#                  prevent this.
#            dbus: consider the unit up when the specified bus name has
#                  been acquired. Requires bus_name. Default if bus_name is
#                  specified. Automatically acquire dependencies of type
#                  Requires= and After= on dbus.socket.
#          notify: behaves like exec but expects service sends a READY=1
#                  notification message via sd_notify or an equivalent
#                  when finished starting (proceeds after notification). Set
#                  notify_access: open (otherwise access defaults to main). If
#                  service supports reloading, and uses a signal to start the
#                  reload, using notify-reload instead.
#   notify-reload: behaves like notify but SIGHUP is sent to service main
#                  process when the service is asked to reload; the manager
#                  will wait for a notification about reload being finished.
#                  Service expected to reply with RELOADING=1; once reloading
#                  is complete service must send a notification of READY=1.
#                  Expected signals may be set with reload_signal.
#            idle: execution of the service program is delayed until all
#                  active jobs are dispatched. Only useful to improve console
#                  output; not useful as a unit ordering tool. Times out after
#                  5s and service program is invoked.
#          {OMIT}: default based on configured options (default)
#
# Variable: type | str
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf.html

# When to consider service finished.
#
# Values:
#     main: consider unit stopped when main process determined according
#           to type exits. Use when service has known forking model and main
#           process can reliably be determined. Cannot be used with
#           type: oneshot (default).
#   cgroup: considered running as long as at least one process in the
#           cgroup has not exited. Use when service has unknown forking model
#           and which might not have a specific main process. Suited for
#           transient or automatically generated services.
#   {OMIT}: main (default)
#
# Variable: exit_type | str
#
# Default: omit (system default).

# Consider service active even when all its processes exited?
#
# Values:
#    False: do not keep service active
#     True: keep service active
#   {OMIT}: False (default)
#
# Variable: remain_after_exit | bool
#
# Default: omit (system default).

# Guess main service PID if it cannot be determined reliably?
#
# Requires type: forking and pid_file unset.
#
# Values:
#    False: do not guess
#     True: guess
#   {OMIT}: True (default)
#
# Variable: guess_main_pid | bool
#
# Default: omit (system default).

# Path to PID file of service.
#
# Recommended for services where Type: forking.
#
# PID files should be avoided in modern projects. Use type: notify,
# notify-reload, simple where possible.
#
# Values:
#   {PATH}: path to file below /run/ (relative paths automatically prefixed
#           with /run/).
#   {OMIT}: use no PID file (default)
#
# Variable: pid_file | str
#
# Default: omit (system default).

# D-bus destination name service uses.
#
# Required for type: dbus. Always define if known.
#
# Values:
#   {DBUS}: dbus destination name
#   {OMIT}: unset (default)
#
# Variable: bus_name | str
#
# Default: omit (system default).

# Commands executed when service started.
#
# Considered main process of daemon unless type: forking.
#
# Only single commands are supported unless type: oneshot.
#
# Only run after all exec_start_pre commands exit successfully.
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: must have remain_after_exit: true and exec_stop; services
#               lacking both exec_start and exec_stop are not valid (default).
#
# Variable: exec_start | list of str
#
# Default: omit (system default).

# Commands executed before exec_start.
#
# May not be used to start long-running processes. All processes forked off by
# processes via exec_start_pre will be killed before the next service process
# is run.
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: no pre commands run (default)
#
# Variable: exec_start_pre | list of str
#
# Default: omit (system default).

# Commands executed after exec_start.
#
# Used in for Before=, After= ordering constraints.
#
# Commands are only run after exec_start invoked successfully, by type:
#          simple: started
#            idle: started
#         oneshot: last command exited successfully
#         forking: initial process exited successfully
#          notify: READY=1 notification
#   notify-reload: READY=1 notification
#            dbus: bus_name taken
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: no post commands run (default)
#
# Variable: exec_start_post | list of str
#
# Default: omit (system default).

# Commands executed before exec_start_pre.
#
# May not be used to start long-running processes. All processes forked off by
# processes via exec_condition will be killed before the next service process
# is run.
#
# Special Case:
#       0: exit code of 0 or matching success_exit_status will continue
#          execution to the next commands.
#   1-254: exit codes 1-254 inclusive skips remaining commands on error and
#          does does not mark unit as failure.
#     255: exit code 255 (or abnormal exit) will be considered failure
#          (remaining commands skipped).
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: no exec condition commands run (default)
#
# Variable: exec_condition | list of str
#
# Default: omit (system default).

# Commands to trigger config reload in service.
#
# $MAINPID set to main process daemon if known; and used in COMMAND LINES.
#
# Recommended using type: notify-reload, or using a command that not only
# triggers a configuration reload of the daemon and synchronously waits for it
# to complete.
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: no exec condition commands run (default)
#
# Variable: exec_reload | list of str
#
# Default: omit (system default).

# Commands to stop service.
#
# $MAINPID set to main process daemon if known; and used in COMMAND LINES.
#
# Commands should be synchronous; it is usually not sufficient to specify a
# command for this setting that only asks the service to terminate but does not
# wait for it to do so - which not result in a clean stop. After commands are
# run, it is implied the service is stopped and any processes remaining for it
# are terminated according to kill_mode.
#
# Only executed if service is successfully started. Restart requests are
# implemented as stop operations followed by start operations.
#
# use this setting for commands requesting clean termination. For post-mortem
# clean-up steps use exec_stop_post instead.
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: no exec condition commands run (default)
#
# Variable: exec_stop | list of str
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.kill.html

# Commands after the service is stopped.
#
# Use this setting for clean-up operations when the service failed to start up
# correctly. Assume uninitialized data from failed startup and no communication
# with service processes. Commands invoked when a service failed to start up
# correctly and is shut down again.
#
# All commands invoked with:
#   $SERVICE_RESULT: service result code
#        $EXIT_CODE: main process exit code
#      $EXIT_STATUS: main process exit status
#
# $MAINPID set to main process daemon if known; and used in COMMAND LINES.
#
# Used in for Before=, After= ordering constraints.
#
# Values:
#    {COMMAND}: COMMAND LINES command
#   -{COMMAND}: COMMAND LINES command, ignoring errors
#       {OMIT}: no exec condition commands run (default)
#
# Variable: exec_stop_post | list of str
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html

# Time to sleep before restarting service (seconds).
#
# Values:
#        #: time in seconds to sleep before restarting
#   {TIME}: TIME time to sleep before restarting
#   {OMIT}: 100ms (default)
#
# Variable: restart_sec | str
#
# Default: omit (system default).

# Number of steps from restart_sec to restart_max_delay_sec.
#
# Requires restart_max_delay_sec set.
#
# Values:
#         #: step interval between restart_sec and restart_max_delay_sec
#         0: disabled
#    {OMIT}: disabled (default)
#
# Variable: restart_steps | int
#
# Default: omit (system default).

# Longest time to sleep before restarting a service.
#
# Requires restart_steps set.
#
# Values:
#     {TIME}: TIME longest sleep time before restarting service
#   infinity: disabled
#     {OMIT}: disabled (default)
#
# Variable: restart_max_delay_sec | str
#
# Default: omit (system default).

# Time to wait for start-up.
#
# Consider service failed and shut down if it does not signal start-up
# completion within the configured time.
#
# Values:
#          #: time in seconds
#     {TIME}: TIME time to wait for start-up
#   infinity: disabled
#     {OMIT}: 90s, disabled if type: oneshot (default)
#
# Variable: timeout_start_sec | str or int
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf.html

# Time to wait for each exec_stop command.
#
# Applies to two conditions:
# * Time to wait for the service to stop. Forcibly terminated by SIGKILL
#   (kill_mode)
# * If any time out remaining exec_stop commands skipped and service terminated
#   by SIGTERM. If no exec_stop commands the service terminated by SIGTERM
#   immediately. Behavior changed with timeout_stop_failure_mode.
#
# Values:
#          #: time in seconds
#     {TIME}: TIME time to wait for start-up
#   infinity: disabled
#     {OMIT}: 90s, disabled if type: oneshot (default)
#
# Variable: timeout_stop_sec | str or int
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.kill.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf.html

# Time to wait for service to terminate when aborted due to watchdog timeout.
#
# Set sensible timeout for core dumping service that is large enough to write
# all expected data while also being short enough to timely handle service
# failure. If service has a short timeout_stop_sec this may be used to give the
# system more time to write a core dump of the service.
#
# Service forcibly terminated by SIGKILL (kill_mode). The core file will be
# truncated in this case.
#
# Values:
#          #: time in seconds
#     {TIME}: TIME time to wait for start-up
#   infinity: disable timeout logic
#     {OMIT}: skip dedicated watchdog abort; use timeout_stop_sec (default)
#
# Variable: timeout_abort_sec | str or int
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.kill.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf.html

# Set both timeout_stop_sec and timeout_abort_sec.
#
# Values:
#          #: time in seconds
#     {TIME}: TIME time to wait for start-up
#   infinity: disable timeout logic
#     {OMIT}: use timeout_stop_sec and timeout_abort_sec (default)
#
# Variable: timeout_sec | str or int
#
# Default: omit (system default).

# Action to take if timeout_start_sec elapses.
#
# Values:
#   terminate: terminate gracefully with kill_signal wait for timeout_stop_sec
#              and send final_kill_signal.
#        kill: immediately terminate with final_kill_signal
#       abort: send watchdog_signal and wait for timeout_abort_sec before
#              sending final_kill_signal.
#      {OMIT}: terminate (default)
#
# Variable: timeout_start_failure_mode | str
#
# Default: omit (system default).

# Action to take if timeout_stop_sec elapses.
#
# Values:
#   terminate: terminate gracefully with kill_signal wait for timeout_stop_sec
#              and send final_kill_signal.
#        kill: immediately terminate with final_kill_signal
#       abort: send watchdog_signal and wait for timeout_abort_sec before
#              sending final_kill_signal.
#      {OMIT}: terminate (default)
#
# Variable: timeout_stop_failure_mode | str
#
# Default: omit (system default).

# Maximum time for service to run.
#
# Service moved to a failure state once elapsed. Does not have effect on
# type: oneshot services.
#
# Values:
#     {TIME}: TIME maximum time for service to run
#   infinity: no time limit
#     {OMIT}: infinity (default)
#
# Variable: runtime_max_sec | str
#
# Default: omit (system default).

# Maximum time for service to run.
#
# Increases max runtime by even distribution up to specified value.
#
# Values:
#      0-#: maximum runtime in seconds
#   {OMIT}: disabled (default)
#
# Variable: runtime_randomized_extra_sec | str
#
# Default: omit (system default).

# Watchdog timeout for a service.
#
# Watchdog activated when start-up completed; if time between keep-alive is
# larger than the configured time the service is placed in a failed state and
# terminated with SIGABRT (or watchdog_signal).
#
# If restart: on-failure,on-watchdog,on-abnormal,always; service will be
# automatically restarted. notify_access should be set to access the
# notification socket. If notify_access is not set it will be implicitly set to
# main.
#
# Values:
#        0: disabled
#   {OMIT}: disabled (default)
#
# Variable: watchdog_sec | str
#
# Default: omit (system default).

# Restart when service exits, killed, or times out.
#
# Process may be main process or exec_start_pre, exec_start_post, exec_stop,
# exec_stop_post, exec_reload. When process death results from systemd
# operations (stop or restart) service will not be restarted.
#
# Exit causes and restart triggers:
#
# Restart/Exit cause  | no | always | on-success | on-failure | on-abnormal | on-abort | on-watchdog
# --------------------|----|--------|------------|------------|-------------|----------|------------
# Clean exit / signal |    | X      | X          |            |             |          |
# Unclean exit        |    | X      |            | X          |             |          |
# Unclean signal      |    | X      |            | X          | X           | X        |
# Timeout             |    | X      |            | X          | X           |          |
# Watchdog            |    | X      |            | X          | X           |          | X
#
# Service not restart if exit or signal is in restart_prevent_exit_status; or
# service stopped with systemctl stop or equivalent.
#
# Service always restarted if exit or signal is in restart_force_exit_status.
#
# Values:
#            no: service will not be restarted (default)
#    on-success: restarted only when the service process exits cleanly via:
#                * exit code 0
#                * type != oneshot and signal: SIGHUP, SIGINT, SIGTERM, SIGPIPE
#                * values in success_exit_status
#    on-failure: restarted when the process exits with a non-zero exit
#                code, terminated by a signal, when an operation times
#                out, and when watchdog timeout triggered. Recommended for long
#                running services.
#   on-abnormal: restarted when the process is terminated by a signal,
#                when an operation times out, or when watchdog timeout
#                triggered. Recommended for services that terminate on their
#                own choice (and avoid immediate restarting).
#   on-watchdog: restarted only if watchdog timeout for service expires
#      on-abort: restarted only if service process exits due to uncaught
#                signal not specified as a clean exit status.
#        always: restarted regardless of clean/dirty exit, terminated
#                abnormally by a signal, or hit timeout. type: oneshot services
#                will never be restarted on a clean exit status, always and
#                on-success are rejected for them.
#        {OMIT}: no (default)
#
# Variable: restart | str
#
# Default: omit (system default).

# How service should restart.
#
# For cases where dependencies may fail temporarily but not make the dependent
# units fail.
#
# Values:
#   normal: restarts through a failed/inactive state (default)
#   direct: transition to activating state directly during auto-restart,
#           skipping failed/inactive state. exec_stop_post is invoked.
#           on_success and on_failure are skipped. Dependent units are
#           not notified of temporary failures.
#   {OMIT}: normal (default)
#
# Variable: restart_mode | str
#
# Default: omit (system default).

# Additional successful exit statuses.
#
# Consider specified exit statuses successful termination in additional to 0;
# except type: oneshot, and signals SIGHUP, SIGINT, SIGTERM, and SIGPIPE.
#
# Definitions can be numeric status, names, or signal names. Process exit codes
# are specified without  "EXIT_" or "EX_" prefix should be used). See signal(7) for a list of signal names.
#
# Values:
#    {VAL}: numeric status, name, or signal name, process exit codes are
#           specified without EXIT_ or EX_.
#       '': no additional exit statuses
#   {OMIT}: '' (default)
#
# Variable: success_exit_status | list of str
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html
# * https://man7.org/linux/man-pages/man7/signal.7.html

# Additional exit statuses to prevent automatic service restarts.
#
# Executed regardless of restart. No effect on processes configured via
# exec_start_pre, exec_start_post, exec_stop, exec_stop_post, exec_reload, but
# only on the main service or configured main service.
#
# Values:
#    {VAL}: numeric status, name, or signal name, process exit codes are
#           specified without EXIT_ or EX_.
#       '': no additional exit statuses
#   {OMIT}: '' (default)
#
# Variable: restart_prevent_exit_status | list of str
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html
# * https://man7.org/linux/man-pages/man7/signal.7.html

# Additional exit statuses to force automatic restarts.
#
# Executed regardless of restart. For type: oneshot a success exit status will
# prevent auto-restarting (regardless of this setting).
#
# Values:
#    {VAL}: numeric status, name, or signal name, process exit codes are
#           specified without EXIT_ or EX_.
#       '': no additional exit statuses
#   {OMIT}: '' (default)
#
# Variable: restart_force_exit_status | list of str
#
# Default: omit (system default).

# Apply root_directory only to exec_start?
#
# Values:
#     True: only apply to exec_start
#    False: apply to all configured commands
#   {OMIT}: False (default)
#
# Variable: root_directory_start_only | bool
#
# Default: omit (system default).

# Set O_NONBLOCK flag for all file descriptors passed via socket-based activation?
#
# If same socket is configured to be passed to multiple service units with
# different non_blocking settings, O_NONBLOCK depends on the order in which
# these services are invoked and will possibly change after service took
#  possession of the socket file descriptor.
#
# It is essential that all services sharing the same socket use the same
# non_blocking setting and do not change the flag in service code either.
#
# Values:
#     True: all file descriptors >= 3 (all except stdin, stdout, stderr)
#           excluding those passed in via file_descriptor_store_max will have
#           the O_NONBLOCK flag set (non-blocking mode). Only useful with a
#           socket unit.
#    False: Do not set O_NONBLOCK
#   {OMIT}: False (default)
#
# Variable: non_blocking | bool
#
# Default: omit (system default).

# Access to service status notification socket.
#
# Values:
#   none: no daemon status updates are accepted from the service
#         processes, all status update messages are ignored (default).
#   main: only service updates from main service process are accepted
#   exec: only service updates sent from any of the main or control
#         processes originating from exec_ commands are accepted.
#    all: all services updates from all members of the service's control
#         group are accepted. This option should be set to open access to
#         the notification socket when using type: notify/notify-reload
#         or watchdog_sec. If options are used but notify_access is not
#         configured, it will be implicitly set to main.
#   {OMIT}: none (default)
#
# Variable: notify_access | str
#
# Default: omit (system default).

# Socket unit name service inherits socket file descriptors from.
#
# Same socket file descriptors may be passed to multiple processes
# simultaneously. A different service may be activated on incoming socket
# traffic than the one which is ultimately configured to inherit the socket
# file descriptors.
#
# The service setting of socket units does not have to match the inverse of the
# sockets setting of the service it refers to.
#
# Values:
#   {NAME}: name of socket unit
#       '': use unit name
#   {OMIT}: '' (default)
#
# Variable: sockets | list of str
#
# Default: omit (system default).

# Number of file descriptors stored in service manager for FDSTORE=1 messages.
#
# Useful for services that can restart after an explicit request or a crash
# without losing state. All file descriptors passed to the service manager from
# a specific service are passed back to the service's main process on the next
# service restart.
#
# notify_access should be set to access the notification socket. If
# notify_access is not set it will be implicitly set to main.
#
# Values:
#      1-#: set number of file descriptors stored, set $FDSTORE environment
#           variable.
#        0: no file descriptors stored (default)
#   {OMIT}: 0 (default)
#
# Variable: file_descriptor_store_max | int
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html
# * https://systemd.io/FILE_DESCRIPTOR_STORE

# When to release service file descriptor store.
#
# Values:
#     False: automatically release when service stopped
#   restart: kept if unit is neither inactive or failed, job is queued
#            for service, or service expected to be restarted (default).
#      True: kept until unit is removed from memory
#    {OMIT}: restart (default)
#
# Variable: file_descriptor_store_preserve | bool or str
#
# Default: omit (system default).

# File location containing USB FunctionFS descriptors.
#
# For implementation of USB gadget functions. Only with a socket unit with
# listen_usb_function. The contents of this file are written to the ep0 file
# after it is opened.
#
# Values:
#    {FILE}: path to file containing USB FunctionFS descriptors
#       '' : not configured
#    {OMIT}: '' (default)
#
# Variable: usb_function_descriptors | str
#
# Default: omit (system default).

# File location containing USB FunctionFS strings.
#
# For implementation of USB gadget functions. Only with a socket unit with
# listen_usb_function. The contents of this file are written to the ep0 file
# after it is opened.
#
# Values:
#    {FILE}: path to file containing USB FunctionFS strings
#       '' : not configured
#    {OMIT}: '' (default)
#
# Variable: usb_function_strings | str
#
# Default: omit (system default).

# Out of memory killing policy for kernel and userspace OOM killer.
#
# Use oom_score_adjust set preferred candidates for process termination.
#
# Values:
#   continue: if unit process OOM killed, log but continue to run
#       stop: log event and cleanly terminate unit
#       kill: if unit process OOM killed, kill all remaining unit
#             processes.
#     {OMIT}: default_oom_policy or continue if delegate set (default)
#
# Variable: oom_policy | str
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-oomd.service.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-system.conf.html
# * https://docs.kernel.org/admin-guide/cgroup-v2.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html

# File descriptors to open and pass to unit.
#
# Useful for services to access files/sockets they normally cannot. File or
# socket is opened and the file descriptor passed to service. If path call
# connect() on socket.
#
# Values:
#   - path: str - path to file or AF_UNIX socket
#     fd_name: str - name associated with file descriptor
#         Values:
#           {NAME}: name (ASCII, no control characters, :), max 255 characters
#               '': use file name (default)
#     options: list of str - access options
#         Values:
#           read-only: open read-only
#              append: open append only
#            truncate: truncate
#            graceful: ignore errors during open
#                  '': open read-write
#   {OMIT}: no file descriptors are opened (default)
#
# Variable: open_file | list of dict
#
# Default: omit (system default).

# UNIX signal to send to service when reloading config.
#
# Requires type: notify-reload.
#
# Values:
#       '': SIGHUP
#   {OMIT}: SIGHUP (default)
#
# Variable: reload_signal | str
#
# Default: omit (system default).
#
# Reference:
# * https://man7.org/linux/man-pages/man7/signal.7.html
