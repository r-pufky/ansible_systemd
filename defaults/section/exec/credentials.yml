---
# yamllint disable rule:line-length
###############################################################################
# Systemd [Exec] Settings
###############################################################################
# Unit Execution environment configuration.
#
# Automatic dependencies:
# * Requires= and After= on all mount units required (equivalent to
#   explicit requires_mounts_for):
#   * working_directory
#   * root_directory
#   * root_image
#   * runtime_directory
#   * state_directory
#   * cache_directory
#   * logs_directory
#   * configuration_directory
# * Requires= and After= on all mount units to access /tmp, /var/tmp; and
#   After= on systemd-tmpfiles-setup.service:
#   * private_tmp
# * After= on systemd-journald.socket:
#   * standard error or output connected to journal or kmsg
# * Ordering and Requirement dependencies on systemd-journald@.service:
#   * log_namespace
#
# Options may be added to the following systemd units/variables:
# * systemd_service - service
# * systemd_socket - socket
# * systemd_mount - mount
# * systemd_swap - swap
#
# See reference sections for syntax formats:
# * SIZE (syntax)
# * TIME (time)
# * SPECIFIERS (unit specifiers)
# * QUOTING (syntax quoting)
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.syntax.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#Specifiers
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.syntax.html#Quoting

###############################################################################
# Credentials
###############################################################################
# Load credentials for unit.
#
# Credentials are limited-size binary or textual objects passed to units.
# Primarily used for passing cryptographic keys (both public and private),
# certificates, user account information, and identity information from host to
# services.
#
# Data is accessible from unit processes via file system, at a read-only
# location (backed by non-swappable memory if possible). Only accessible to
# user associated with the unit, via the user, dynamic_user. Location of
# credentials is exported as $CREDENTIALS_DIRECTORY.
#
# Accumulated credential size limit of 1 MB per unit is enforced.
#
# Credential files/IPC sockets must be accessible to service manager, but not
# directly accessible to unit processes: credential data is read and copied
# into separate, read-only copies for unit, accessible to appropriately
# privileged processes. Useful with dynamic_user as privileged data can be made
# available to processes running under a dynamic UID without having to open
# access to all users.
#
# To reference a credentials:
# * exec_start: '${CREDENTIALS_DIRECTORY}/mycred'
# * environment: '%d/mycred'
# * system services: '/run/credentials/UNITNAME'
#
# Values:
#   - id: str - ascii credential name
#     path: str - credential location
#         Values:
#              {PATH}: absolute paths are opened as regular file and credential
#                      data read from it.
#               {DIR}: absolute path to directory, every file recursively
#                      loaded as a separate credential. The ID for each
#                      credential is '{ID}_$FILENAME'. Symlinks ignored.
#           {AF_UNIX}: absolute path to AF_UNIX stream socket, connection made
#                      at unit start-up and credential data read. The contents
#                      may be arbitrary binary or textual data, including
#                      newline characters and NUL bytes.
#              {CRED}: non-absolute paths are considered credential
#                      identifiers; inherit from service manager credentials if
#                      matched, else load from /etc/credstore/,
#                      /run/credstore/, /usr/lib/credstore/.
#                {ID}: use credential id (inherit from service manager)
#                  '': {ID}
#   {OMIT}: disabled (default)
#
# Variable: load_credential | list of dict
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#LoadCredential=ID:PATH

# Load encrypted credentials for unit.
#
# Credentials are limited-size binary or textual objects passed to units.
# Primarily used for passing cryptographic keys (both public and private),
# certificates, user account information, and identity information from host to
# services.
#
# Identical to load_credential except credential data is decrypted and
# authenticated before being passed to executed processes.
#
# A credential configured this way may be symmetrically encrypted/authenticated
# with a secret key derived from system's TPM2 security chip, or with secret
# key stored in /var/lib/systemd/credentials.secret, or both. Using encrypted
# and authenticated credentials improves security as credentials are not stored
# in plaintext and only authenticated and decrypted to plaintext the moment a
# service requiring them is started. Moreover, credentials may be bound to
# local hardware and installations, so that they cannot easily be analyzed
# offline, or be generated externally.
#
# /dev/tpmrm0 added with rw mode to device_allow when:
# * device_policy: closed or strict
# * device_policy: auto, device_allow set
# * private_devices set
#
# Data is accessible from unit processes via file system, at a read-only
# location (backed by non-swappable memory if possible). Only accessible to
# user associated with the unit, via the user, dynamic_user. Location of
# credentials is exported as $CREDENTIALS_DIRECTORY.
#
# Accumulated credential size limit of 1 MB per unit is enforced.
#
# Credential files/IPC sockets must be accessible to service manager, but not
# directly accessible to unit processes: credential data is read and copied
# into separate, read-only copies for unit, accessible to appropriately
# privileged processes. Useful with dynamic_user as privileged data can be made
# available to processes running under a dynamic UID without having to open
# access to all users.
#
# To reference a credentials:
# * exec_start: '${CREDENTIALS_DIRECTORY}/mycred'
# * environment: '%d/mycred'
# * system services: '/run/credentials/UNITNAME'
#
# Values:
#   - id: str - ascii credential name
#     path: str - credential location
#         Values:
#              {PATH}: absolute paths are opened as encrypted file implementing
#                      systemd-creds and credential data read from it.
#               {DIR}: absolute path to directory, every file recursively
#                      loaded implementing systemd-creds as a separate
#                      credential. The ID for each credential is
#                      '{ID}_$FILENAME'. Symlinks ignored.
#           {AF_UNIX}: absolute path to AF_UNIX stream socket, connection made
#                      at unit start-up and credential data read. The contents
#                      may be arbitrary binary or textual data, including
#                      newline characters and NUL bytes.
#              {CRED}: non-absolute paths are considered credential
#                      identifiers; inherit from service manager credentials if
#                      matched, else load from /etc/credstore/,
#                      /run/credstore/, /usr/lib/credstore/,
#                      /run/credstore.encrypted/, /etc/credstore.encrypted/,
#                      /usr/lib/credstore.encrypted/.
#                {ID}: use credential id (inherit from service manager)
#                  '': {ID}
#   {OMIT}: disabled (default)
#
# Variable: load_credential_encrypted | list of dict
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-creds.html
# * https://www.freedesktop.org/software/systemd/man/latest/systemd.resource-control.html

# Import credentials to the unit.
#
# Load credential via inheriting from service manager credentials if matched,
# else load from /etc/credstore/, /run/credstore/, /usr/lib/credstore/,
# /run/credstore.encrypted/, /etc/credstore.encrypted/,
# /usr/lib/credstore.encrypted/. First match found is used.
#
# load_credential, load_credential_encrypted take priority.
#
# Values:
#    {CRED}: exact credential name to import
#   {CRED}*: credential name to import with globbing (only accepted wildcard at
#            end).
#    {OMIT}: disabled (default)
#
# Variable: import_credential | list of str
#
# Default: omit (system default).
#
# Reference:
# * https://man7.org/linux/man-pages/man7/glob.7.html

# Set credentials for unit.
#
# Do not use this option for secret data; it is accessible to unprivilege
# processes via IPC. Only use for user IDs, public key material, non-sensitive
# data. Use load_credential for everything else.
#
# Credentials are limited-size binary or textual objects passed to units.
# Primarily used for passing cryptographic keys (both public and private),
# certificates, user account information, and identity information from host to
# services.
#
# Data is accessible from unit processes via file system, at a read-only
# location (backed by non-swappable memory if possible). Only accessible to
# user associated with the unit, via the user, dynamic_user. Location of
# credentials is exported as $CREDENTIALS_DIRECTORY.
#
# load_credential, load_credential_encrypted, import_credential take priority;
# set_credential will act as a default
#
# Accumulated credential size limit of 1 MB per unit is enforced.
#
# To reference a credentials:
# * exec_start: '${CREDENTIALS_DIRECTORY}/mycred'
# * environment: '%d/mycred'
# * system services: '/run/credentials/UNITNAME'
#
# Values:
#   - id: str - ascii credential name
#     data: str - data to use for credential; use c-style escaping for binary
#           data ('\n', '\x00', etc).
#   {OMIT}: disabled (default)
#
# Variable: set_credential | list of dict
#
# Default: omit (system default).

# Set encrypted credentials for unit.
#
# Use systemd-creds -p to generate set_credential_encrypted lines. Safe to use
# for secret material.
#
# Credentials are limited-size binary or textual objects passed to units.
# Primarily used for passing cryptographic keys (both public and private),
# certificates, user account information, and identity information from host to
# services.
#
# Data is accessible from unit processes via file system, at a read-only
# location (backed by non-swappable memory if possible). Only accessible to
# user associated with the unit, via the user, dynamic_user. Location of
# credentials is exported as $CREDENTIALS_DIRECTORY.
#
# load_credential, load_credential_encrypted, import_credential take priority;
# set_credential_encrypted will act as a default
#
# Accumulated credential size limit of 1 MB per unit is enforced.
#
# To reference a credentials:
# * exec_start: '${CREDENTIALS_DIRECTORY}/mycred'
# * environment: '%d/mycred'
# * system services: '/run/credentials/UNITNAME'
#
# Values:
#   - id: str - ascii credential name
#     data: str - data to use for credential; use c-style escaping for binary
#           data ('\n', '\x00', etc).
#   {OMIT}: disabled (default)
#
# Variable: set_credential_encrypted | list of dict
#
# Default: omit (system default).
#
# Reference:
# * https://www.freedesktop.org/software/systemd/man/latest/systemd-creds.html#
